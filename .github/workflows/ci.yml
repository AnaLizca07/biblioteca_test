name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: 1. Build and Install Dependencies
      run: |
        echo "Building Docker images..."
        docker compose build

    - name: 2. Static Code Analysis
      run: |
        echo "Running Static Analysis..."
        # Solo analizar nuestro código, no las dependencias
        docker compose run --rm api flake8 app/ tests/ --count --show-source --statistics
        docker compose run --rm api pylint app/ tests/ --disable=C,R,W

    - name: 3. Unit Tests
      run: |
        echo "Running Unit Tests..."
        docker compose run --rm -e DATABASE_URL="postgresql://postgres:postgres@db:5432/biblioteca" api pytest tests/test_unit.py -v --cov=app

    - name: 4. Integration Tests
      run: |
        echo "Running Integration Tests..."
        docker compose up -d
        echo "Waiting for database to be ready..."
        docker compose run --rm api bash -c "
        for i in {1..30}; do
          if pg_isready -h db -p 5432 -U postgres; then
            echo 'Database is ready'
            break
          fi
          echo 'Waiting for database...'
          sleep 1
        done
        "
        
        # Run migrations if needed
        docker compose run --rm -e DATABASE_URL="postgresql://postgres:postgres@db:5432/biblioteca" api alembic upgrade head || echo "No migrations to run"
        
        # Run integration tests
        docker compose run --rm \
          -e DATABASE_URL="postgresql://postgres:postgres@db:5432/biblioteca" \
          -e PYTHONPATH=/app \
          api pytest tests/test_integration.py -v
        
        # Run Selenium tests with Chrome
        docker compose run --rm \
          -e DATABASE_URL="postgresql://postgres:postgres@db:5432/biblioteca" \
          -e PYTHONPATH=/app \
          -e CHROME_OPTIONS="--headless --no-sandbox --disable-dev-shm-usage" \
          api pytest tests/test_selenium.py -v
        
        docker compose down

    - name: 5. Performance Tests (Light Version)
      run: |
        echo "Running Performance Tests..."
        docker compose up -d
        echo "Waiting for services to be ready..."
        sleep 15
        
        # Wait for API to be ready
        docker compose run --rm api bash -c "
        for i in {1..30}; do
          if curl -f http://api:8000/health 2>/dev/null; then
            echo 'API is ready'
            break
          fi
          echo 'Waiting for API...'
          sleep 1
        done
        "
        
        # Run Locust tests
        docker compose run --rm \
          -e DATABASE_URL="postgresql://postgres:postgres@db:5432/biblioteca" \
          api locust -f locustfile.py --headless -u 10 -r 2 --run-time 30s --host http://api:8000
        
        docker compose down

    - name: 6. Success Message
      if: success()
      run: |
        echo "✅ Pipeline completed successfully!"
        echo "All tests have passed in Docker environment:"
        echo "  ✓ Docker build and dependencies"
        echo "  ✓ Static code analysis passed"
        echo "  ✓ Unit tests passed"
        echo "  ✓ Integration tests passed"
        echo "  ✓ Performance tests completed"

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
        docker system prune -f
